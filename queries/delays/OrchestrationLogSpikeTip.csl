let scaleUnit = "{su}";
let startTime = todatetime("{start}") - 15min;
let endTime = todatetime("{end}") + 15min;
let service = "{service}";
let hubName = "{hub}";
let command = "{command}";
let threshold = 10;
let step = totimespan("1m");
let window = totimespan("5m");
let interval = 1m;
let hostId = "{hostId}";
 OrchestrationLog
 | where PreciseTimeStamp between (startTime .. endTime)
 | where Service =~ service
 | where ScaleUnit =~ scaleUnit
 | where HostId startswith hostId
 | where Command contains command
 | project PreciseTimeStamp, OrchestrationId, ExceptionMessage, Feature, HostId
 | top 1000 by PreciseTimeStamp desc

// Take some sample orchestrationId and run this
// let planId = "a1d4ca72-3150-4610-ba6f-3a6396189602"; 
// let hostId = tostring(toscalar(OrchestrationPlanContext | where PlanId == planId | summarize by HostId));
// let hostName = tostring(toscalar(ServiceHostAggregated() | where HostId == hostId | take 1 | project Name));
// find in (ActivityLog, AgentPoolRequestHistory, HttpOutgoingRequests, OrchestrationLog, OrchestrationPlanContext, ProductTrace)
// where OrchestrationId startswith planId
// project PreciseTimeStamp, 
//         OrchestrationId, 
//         Tracepoint,
//         Command, 
//         Message,  
//         UrlPath, 
//         ResponseCode, 
//         Level, // for coloring :)
//         ActivityId, 
//         ExceptionMessage,
//         UserAgent
// | extend HostName = hostName